{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Charts/Charts.jsx","components/CountryPicker/CountryPicker.jsx","App.js","serviceWorker.js","index.js","App.module.css","components/Charts/Charts.module.css","components/CountryPicker/CountryPicker.module.css","images/logo.png"],"names":["module","exports","Info","data","confirmed","recovered","deaths","lastUpdate","updatedDate","Date","toLocaleDateString","timeZone","weekday","year","month","day","toLocaleTimeString","className","styles","container","Grid","spacing","justify","item","xs","md","component","Card","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","url","fetchData","country","a","changeableUrl","axios","get","fetchDailyData","map","date","reportDate","total","fetchCountries","countries","name","Charts","useState","dailyData","setDailyData","useEffect","initialDailyData","fetchMyAPI","barChart","labels","datasets","label","backgroundColor","options","legend","display","title","text","lineChart","length","borderColor","fill","Countries","handleCountryChange","setCountries","fetchAPI","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","setState","fetchedData","console","log","this","image","src","alt","Cards","CountryPicker","React","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.fa76cec4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3DoCe\",\"card\":\"Cards_card__2kRX_\",\"infected\":\"Cards_infected__2CLKk\",\"recovered\":\"Cards_recovered__1rtwo\",\"deaths\":\"Cards_deaths__3ly3R\"};","import React from 'react';\r\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\n\r\nimport styles from './Cards.module.css';\r\n\r\nconst Info = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\r\n  if (!confirmed) {\r\n    return 'Loading...';\r\n  }\r\n  const updatedDate = new Date(lastUpdate).toLocaleDateString('en-US', {timeZone:'UTC',weekday:'short',year: 'numeric', month: 'long', day: '2-digit'}) + \", \" +new Date(lastUpdate).toLocaleTimeString();\r\n  return (\r\n    <div className={styles.container}>\r\n      <Grid container spacing={2} justify=\"center\">\r\n        <Grid item xs={12} md={3} component={Card} className={cx(styles.card, styles.infected)}>\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              Infected\r\n            </Typography>\r\n            <Typography variant=\"h5\" component=\"h2\">\r\n              <CountUp start={0} end={confirmed.value} duration={2.75} separator=\",\" />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">\r\n              {updatedDate}\r\n            </Typography>\r\n            <Typography variant=\"body2\" component=\"p\">\r\n              Number of active cases of COVID-19.\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid item xs={12} md={3} component={Card} className={cx(styles.card, styles.recovered)}>\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              Recovered\r\n            </Typography>\r\n            <Typography variant=\"h5\" component=\"h2\">\r\n              <CountUp start={0} end={recovered.value} duration={2.75} separator=\",\" />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">\r\n              {updatedDate}\r\n            </Typography>\r\n            <Typography variant=\"body2\" component=\"p\">\r\n              Number of recoveries from COVID-19.\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid item xs={12} md={3} component={Card} className={cx(styles.card, styles.deaths)}>\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              Deaths\r\n            </Typography>\r\n            <Typography variant=\"h5\" component=\"h2\">\r\n              <CountUp start={0} end={deaths.value} duration={2.75} separator=\",\" />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">\r\n              {updatedDate}\r\n            </Typography>\r\n            <Typography variant=\"body2\" component=\"p\">\r\n              Number of deaths caused by COVID-19.\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\nexport default Info;","import axios from 'axios';\r\n\r\nconst url = 'https://covid19.mathdro.id/api';\r\n\r\nexport const fetchData = async (country) => {\r\n  let changeableUrl = url;\r\n\r\n  if (country) {\r\n    changeableUrl = `${url}/countries/${country}`;\r\n  }\r\n\r\n  try {\r\n    const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(changeableUrl);\r\n\r\n    return { confirmed, recovered, deaths, lastUpdate };\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\nexport const fetchDailyData = async () => {\r\n  try {\r\n    const { data } = await axios.get(`${url}/daily`);\r\n\r\n    return data.map(({ confirmed, deaths, reportDate: date }) => ({ confirmed: confirmed.total, deaths: deaths.total, date }));\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\nexport const fetchCountries = async () => {\r\n  try {\r\n    const { data: { countries } } = await axios.get(`${url}/countries`);\r\n\r\n    return countries.map((country) => country.name);\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};","import React, { useState, useEffect } from 'react';\r\nimport { Line, Bar } from 'react-chartjs-2';\r\n\r\nimport { fetchDailyData } from '../../api';\r\n\r\nimport styles from './Charts.module.css';\r\n\r\nconst Charts = ({ data: { confirmed, recovered, deaths }, country }) => {\r\n  const [dailyData, setDailyData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchMyAPI = async () => {\r\n      const initialDailyData = await fetchDailyData();\r\n\r\n      setDailyData(initialDailyData);\r\n    };\r\n\r\n    fetchMyAPI();\r\n  }, []);\r\n\r\n  const barChart = (\r\n    confirmed ? (\r\n      <Bar\r\n        data={{\r\n          labels: ['Infected', 'Recovered', 'Deaths'],\r\n          datasets: [\r\n            {\r\n              label: 'People',\r\n              backgroundColor: ['rgba(0, 0, 255, 0.5)', 'rgba(0, 255, 0, 0.5)', 'rgba(255, 0, 0, 0.5)'],\r\n              data: [confirmed.value, recovered.value, deaths.value],\r\n            },\r\n          ],\r\n        }}\r\n        options={{\r\n          legend: { display: false },\r\n          title: { display: true, text: `Current state in ${country}` },\r\n        }}\r\n      />\r\n    ) : null\r\n  );\r\n\r\n  const lineChart = (\r\n    dailyData.length? (\r\n      <Line\r\n        data={{\r\n          labels: dailyData.map(({ date }) => date),\r\n          datasets: [{\r\n            data: dailyData.map((data) => data.confirmed),\r\n            label: 'Infected',\r\n            borderColor: '#3333ff',\r\n            fill: true,\r\n          }, {\r\n            data: dailyData.map((data) => data.deaths),\r\n            label: 'Deaths',\r\n            borderColor: 'red',\r\n            backgroundColor: 'rgba(255, 0, 0, 0.5)',\r\n            fill: true,\r\n          },\r\n          ],\r\n        }}\r\n      />\r\n    ) : null\r\n  );\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      {country ? barChart : lineChart}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Charts;","import React, { useState, useEffect } from 'react';\r\nimport { NativeSelect, FormControl } from '@material-ui/core';\r\n\r\nimport { fetchCountries } from '../../api';\r\n\r\nimport styles from './CountryPicker.module.css';\r\n\r\nconst Countries = ({ handleCountryChange }) => {\r\n  const [countries, setCountries] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      setCountries(await fetchCountries());\r\n    };\r\n\r\n    fetchAPI();\r\n  }, []);\r\n\r\n  return (\r\n    <FormControl className={styles.formControl}>\r\n      <NativeSelect defaultValue=\"\" onChange={(e) => handleCountryChange(e.target.value)}>\r\n        <option value=\"\">Global</option>\r\n        {countries.map((country, i) => <option key={i} value={country}>{country}</option>)}\r\n      </NativeSelect>\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport default Countries;","import React from \"react\";\nimport { Cards, Charts, CountryPicker } from \"./components\";\nimport { fetchData } from \"./api\";\nimport styles from './App.module.css';\nimport image from './images/logo.png';\nclass App extends React.Component {\n  state = {\n    data: {},\n    country: '',\n  }\n\n  async componentDidMount() {\n    const fetchedData = await fetchData();\n    console.log('Data : ',fetchedData);\n    this.setState({data : fetchedData})\n  }\n\n  handleCountryChange = async (country) => {\n    const data = await fetchData(country);\n\n    this.setState({ data, country: country });\n  }\n\n\n  render() {\n    const {data,country } = this.state;\n    return (\n      <div className={styles.container}>\n        <img className={styles.image} src={image} alt=\"COVID-19\" />\n        <Cards data={data} />\n        <CountryPicker handleCountryChange={this.handleCountryChange} />\n        <Charts data={data} country={country} /> \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__3gKT_\",\"image\":\"App_image__1hSMM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Charts_container__1Z_ws\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__xHoJi\",\"MuiNativeSelect-select\":\"CountryPicker_MuiNativeSelect-select__W8U27\"};","module.exports = __webpack_public_path__ + \"static/media/logo.d7265326.png\";"],"sourceRoot":""}